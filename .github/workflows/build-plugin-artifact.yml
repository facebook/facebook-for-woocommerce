name: Build Plugin Artifact

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    
    steps:
      - uses: actions/checkout@v1
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          tools: composer
      
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci || npm install
          composer install
      
      - name: Build plugin
        run: npm run build
      
      - name: Store built plugin
        uses: actions/upload-artifact@master
        continue-on-error: true
        with:
          name: facebook-for-woocommerce
          path: facebook-for-woocommerce.zip
          
      - name: Check if build succeeded
        id: check_build
        run: |
          if [ -f "facebook-for-woocommerce.zip" ]; then
            echo "build_success=true" >> $GITHUB_OUTPUT
            echo "filesize=$(du -h facebook-for-woocommerce.zip | cut -f1)" >> $GITHUB_OUTPUT
          else
            echo "build_success=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Add PR comment - Success
        if: steps.check_build.outputs.build_success == 'true'
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fileSize = '${{ steps.check_build.outputs.filesize }}';
            const prNumber = context.issue.number;
            const runUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
            
            const commentBody = '## 📦 Plugin Build Ready\n\n' +
              '**Build Information:**\n' +
              `- PR: #${prNumber}\n` +
              `- Commit: ${{ github.sha }}\n` +
              `- File Size: ${fileSize}\n` +
              `- Build Date: ${{ github.event.pull_request.updated_at }}\n\n` +
              'The latest built version of this plugin is ready. To download:\n\n' +
              `1. [Go to the Actions run](${runUrl})\n` +
              '2. Scroll to the bottom and look for the "Artifacts" section\n' +
              '3. Download the "facebook-for-woocommerce" zip file';
            
            // First, find comments that we've posted before
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });
            
            const botComment = comments.find(comment => {
              return comment.user.login === 'github-actions[bot]' && 
                     comment.body.includes('Plugin Build Ready');
            });
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
            }
      
      - name: Add PR comment - Failure
        if: steps.check_build.outputs.build_success == 'false'
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.issue.number;
            const runUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
            
            const commentBody = '## ❌ Plugin Build Failed\n\n' +
              'The workflow tried to build the plugin but couldn\'t find the zip file.\n' +
              `Please check the [Actions logs](${runUrl}) for details.`;
            
            // First, find comments that we've posted before
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });
            
            const botComment = comments.find(comment => {
              return comment.user.login === 'github-actions[bot]' && 
                     comment.body.includes('Plugin Build Failed');
            });
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
            } 