name: Build Plugin Artifact

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    
    steps:
      - uses: actions/checkout@v1
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          tools: composer
      
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci || npm install
          composer install
      
      - name: Build plugin
        run: npm run build
      
      - name: Check if zip file exists
        id: check_files
        run: |
          if [ -f "facebook-for-woocommerce.zip" ]; then
            echo "ZIP_EXISTS=true" >> $GITHUB_OUTPUT
            echo "ZIP_SIZE=$(du -h facebook-for-woocommerce.zip | cut -f1)" >> $GITHUB_OUTPUT
          else
            echo "ZIP_EXISTS=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create artifact directory
        if: steps.check_files.outputs.ZIP_EXISTS == 'true'
        run: |
          # Create a unique name for this build
          PR_NUMBER="${{ github.event.pull_request.number }}"
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          BUILD_ID="pr-${PR_NUMBER}-${SHORT_SHA}"
          
          # Create a folder with build info
          mkdir -p "${BUILD_ID}"
          cp facebook-for-woocommerce.zip "${BUILD_ID}/"
          
          # Create an info file
          cat << EOF > "${BUILD_ID}/build-info.txt"
          Build ID: ${BUILD_ID}
          PR: #${PR_NUMBER}
          Commit: ${{ github.sha }}
          Date: $(date)
          EOF
          
          echo "BUILD_ID=${BUILD_ID}" >> $GITHUB_OUTPUT
      
      - name: Upload build as artifact
        if: steps.check_files.outputs.ZIP_EXISTS == 'true'
        uses: actions/upload-artifact@v1
        with:
          name: ${{ steps.check_files.outputs.BUILD_ID }}
          path: ${{ steps.check_files.outputs.BUILD_ID }}
      
      - name: Get artifact download URL
        if: steps.check_files.outputs.ZIP_EXISTS == 'true'
        id: artifact_url
        run: |
          ARTIFACT_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "ARTIFACT_URL=${ARTIFACT_URL}" >> $GITHUB_OUTPUT
      
      - name: Add or update PR comment
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = ${{ github.event.pull_request.number }};
            const sha = "${{ github.sha }}".substring(0, 7);
            const zipExists = "${{ steps.check_files.outputs.ZIP_EXISTS }}" === "true";
            const zipSize = "${{ steps.check_files.outputs.ZIP_SIZE }}";
            const artifactUrl = "${{ steps.artifact_url.outputs.ARTIFACT_URL }}";
            const buildId = "${{ steps.check_files.outputs.BUILD_ID }}";
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });
            
            const buildBotComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('## üì¶ Plugin Build')
            );
            
            // Create comment body
            let commentBody = `## üì¶ Plugin Build - ${new Date().toISOString()}
            
            Build triggered by commit: \`${sha}\`
            `;
            
            if (zipExists) {
              commentBody += `
              ‚úÖ **Build successful** - Size: ${zipSize}
              
              ### Download Instructions
              
              1. Go to the [Actions tab](${artifactUrl})
              2. Scroll down to the "Artifacts" section 
              3. Download the "${buildId}" file
              4. Extract the zip file
              5. Inside you'll find the Facebook for WooCommerce plugin zip file
              
              > **Note:** You need to be logged in to GitHub to download the artifact
              `;
            } else {
              commentBody += `
              ‚ùå **Build failed** - No zip file produced
              
              Please check the [Actions tab](${artifactUrl}) for more details.
              `;
            }
            
            // Add disclaimer
            commentBody += `
            
            ---
            *This comment was automatically generated by GitHub Actions.*`;
            
            // Update or create comment
            if (buildBotComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: buildBotComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
            } 