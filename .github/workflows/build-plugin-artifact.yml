name: Build Plugin Artifact

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build-and-notify:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    
    steps:
      - uses: actions/checkout@v1
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          tools: composer
      
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci || npm install
          composer install
      
      - name: Build plugin
        run: npm run build
      
      - name: Check build result
        id: check_build
        run: |
          if [ -f "facebook-for-woocommerce.zip" ]; then
            echo "ZIP_EXISTS=true" >> $GITHUB_OUTPUT
            echo "ZIP_SIZE=$(du -h facebook-for-woocommerce.zip | cut -f1)" >> $GITHUB_OUTPUT
          else
            echo "ZIP_EXISTS=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Add or update PR comment
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = ${{ github.event.pull_request.number }};
            const sha = "${{ github.sha }}".substring(0, 7);
            const branch = "${{ github.head_ref }}";
            const zipExists = "${{ steps.check_build.outputs.ZIP_EXISTS }}" === "true";
            const zipSize = "${{ steps.check_build.outputs.ZIP_SIZE }}";
            const buildDate = new Date().toISOString();
            const runId = context.runId;
            const repoUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });
            
            const buildBotComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('Plugin Build Status')
            );
            
            let commentBody = `## üì¶ Plugin Build Status\n\n` +
              `**PR:** #${prNumber}\n` +
              `**Commit:** ${sha}\n` +
              `**Branch:** \`${branch}\`\n` +
              `**Build Time:** ${buildDate}\n` +
              `**Workflow Run:** [View Details](${repoUrl}/actions/runs/${runId})\n\n`;
            
            if (zipExists) {
              commentBody += `### ‚úÖ Build Successful\n` +
                `Size: ${zipSize}\n\n` +
                `### üîΩ Manual Download Process\n\n` +
                `Due to GitHub workflow restrictions, the QA team should follow these steps to obtain the plugin:\n\n` +
                `1. Notify an authorized team member that you need the plugin build from PR #${prNumber} (commit ${sha})\n` +
                `2. They can download it for you directly from the runner or build it locally using these commands:\n\n` +
                `\`\`\`bash\n` +
                `git fetch origin pull/${prNumber}/head:pr-test\n` +
                `git checkout pr-test\n` +
                `npm install\n` +
                `composer install\n` +
                `npm run build\n` +
                `# The zip file will be in the project root directory\n` +
                `\`\`\`\n\n` +
                `### üîÑ Automatic Builds\n\n` +
                `For future PRs, consider setting up a dedicated build server that can host the artifacts and provide direct download links.\n`;
            } else {
              commentBody += `### ‚ùå Build Failed\n\n` +
                `The build process completed but did not produce the expected zip file.\n\n` +
                `Please check the [workflow details](${repoUrl}/actions/runs/${runId}) for more information on what went wrong.\n`;
            }
            
            commentBody += `\n\n---\n` +
              `*This comment was automatically generated by the build workflow at ${buildDate}*`;
            
            // Update or create comment
            if (buildBotComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: buildBotComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
            } 