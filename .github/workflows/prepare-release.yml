name: "Prepare New Release"
# run-name: Prepare New Release `${{ github.event.inputs.type }}/${{ github.event.inputs.version }}` from by @${{ github.actor }}

# **What it does**: Does release preparation: creates the release branch and the PR with a checklist.
# **Why we have it**: To support devs automating a few manual steps and to leave a nice reference for consumers.

on:
  # workflow_dispatch:
  #   inputs:
  #     ## In the future we could infer that version from the changelog, or bump it via major|minor|patch.
  #     version:
  #       description: "Version number to be released"
  #       required: true
  push:
    branches:
      - 'tzahgr/prepare_release'


jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
            fetch-depth: 0

      - name: Get latest release tag
        id: get_release
        uses: actions/github-script@v7
        with:
          script: |
            const latestRelease = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const tag = latestRelease.data.tag_name;
            core.setOutput("latest_tag", tag);
            console.log("Latest release tag:", tag);

      - name: Get commits since latest release
        id: get_commits
        run: |
          git fetch origin tag ${{ steps.get_release.outputs.latest_tag }}
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          git rev-list ${{ steps.get_release.outputs.latest_tag }}..HEAD >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build changelog from PRs
        id: changelog
        uses: actions/github-script@v7
        env:
          COMMITS: ${{ steps.get_commits.outputs.commits }}
        with:
          script: |
            const commits = process.env.COMMITS.trim().split('\n');
            const changelog = [];

            for (const sha of commits) {
              const commit = await github.rest.repos.getCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: sha,
              });

              const msg = commit.data.commit.message;
              const prMatch = msg.match(/\(#(\d+)\)/);
              if (prMatch) {
                const prNumber = parseInt(prMatch[1], 10);
                pr = (await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber,
                })).data;
                const labelPrefix = "changelog: ";
                const changeLogLabels = pr.labels.map(l => l.name).filter((l) => l.startsWith(labelPrefix)).map(l => l.replace(labelPrefix, ""));
                const itemPrefix = changeLogLabels.length > 0 ? `${changeLogLabels[0].charAt(0).toUpperCase()}${changeLogLabels[0].slice(1)} - ` : "";
                changelog.push(`* ${itemPrefix}${pr.title} by @${pr.user.login} in #${prNumber}`);
              }
            }
            const version = "X.X.X";
            const date = new Date();
            const output = `= ${version} - ${date.toISOString().slice(10)} =\n${changelog.join('\n')}\n`;
            core.setOutput('changelog', output);
            console.log(output);
